openapi: 3.1.1
paths:
  /metrics:
    get:
      operationId: PrometheusController_index
      parameters: []
      responses:
        "200":
          description: ""
  /auth/signing-message:
    get:
      operationId: AuthController_getSigningMessage
      summary: Get signing message
      description: Returns a signing message with a randomly generated nonce for
        authentication purposes.
      parameters: []
      responses:
        "200":
          description: A signing message containing a nonce has been successfully generated
          content:
            application/json:
              schema:
                type: string
                example: >-
                  Welcome to Limitless.exchange! Please sign this message to
                  verify your identity.


                  Nonce: 0xa1b2c3d4e5f67890...
      tags:
        - auth
  /auth/verify-auth:
    get:
      operationId: AuthController_verifyAuth
      summary: Verify authentication
      description: Verifies if the user is authenticated by checking the session cookie
      parameters: []
      responses:
        "200":
          description: User is authenticated
          content:
            application/json:
              schema:
                type: string
                description: Ethereum address of the authenticated user
                example: "0x1234567890123456789012345678901234567890"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: The token cookie is required
      tags:
        - auth
      security:
        - limitless_session: []
  /auth/login:
    post:
      operationId: AuthController_login
      summary: User login
      description: Authenticates a user with a signed message and creates a session
      parameters:
        - name: x-account
          in: header
          description: The Ethereum address of the user
          required: true
          schema:
            type: string
        - name: x-signing-message
          in: header
          description: The signing message generated by the server
          required: true
          schema:
            type: string
        - name: x-signature
          in: header
          description: The signature generated by signing the message with the user's wallet
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "200":
          description: User has been successfully logged in and a session cookie has been
            set
          content:
            application/json:
              schema:
                type: object
                properties:
                  account:
                    type: string
                    example: "0x1234567890123456789012345678901234567890"
                  displayName:
                    type: string
                    example: 0x1234...7890
                  smartWallet:
                    type: string
                    nullable: true
                    example: "0x0987654321098765432109876543210987654321"
                  client:
                    type: string
                    example: eoa
        "400":
          description: Bad request (missing or invalid parameters)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Smart wallet is required
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error creating JWT token
      tags:
        - auth
  /auth/logout:
    post:
      operationId: AuthController_logout
      summary: User logout
      description: Logs out the user by clearing the session cookie
      parameters: []
      responses:
        "200":
          description: User has been successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully
      tags:
        - auth
      security:
        - limitless_session: []
  /markets/active/{categoryId}:
    get:
      operationId: MarketController_getActiveMarkets
      summary: Get active markets and groups
      description: Retrieves markets and groups that are active and not yet resolved,
        with optional category filtering
      parameters:
        - name: page
          required: false
          in: query
          description: Page number for pagination
          schema:
            example: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 10
            type: number
        - name: sortBy
          required: false
          in: query
          description: Sort by query parameter
          schema:
            example: newest
            type: string
        - name: categoryId
          required: false
          in: path
          description: Filter markets by category ID
          schema:
            type: number
      responses:
        "200":
          description: Active markets and groups with volume and liquidity data
        "500":
          description: Server error when retrieving markets data
      tags:
        - Markets
  /markets/active:
    get:
      operationId: MarketController_getActiveMarkets
      summary: Get active markets and groups
      description: Retrieves markets and groups that are active and not yet resolved,
        with optional category filtering
      parameters:
        - name: page
          required: false
          in: query
          description: Page number for pagination
          schema:
            example: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 10
            type: number
        - name: sortBy
          required: false
          in: query
          description: Sort by query parameter
          schema:
            example: newest
            type: string
        - name: categoryId
          required: false
          in: path
          description: Filter markets by category ID
          schema:
            type: number
      responses:
        "200":
          description: Active markets and groups with volume and liquidity data
        "500":
          description: Server error when retrieving markets data
      tags:
        - Markets
  /markets/categories/count:
    get:
      operationId: MarketController_getActiveMarketCountPerCategory
      summary: Get active market count per category
      description: Returns the number of active markets for each category and the
        total market count
      parameters: []
      responses:
        "200":
          description: Object containing category counts and total count
          content:
            application/json:
              schema:
                type: object
                properties:
                  category:
                    type: object
                    additionalProperties:
                      type: number
                    example:
                      "1": 10
                      "2": 5
                      "3": 8
                  totalCount:
                    type: number
                    example: 23
        "500":
          description: Server error when retrieving category count data
      tags:
        - Markets
  /markets/dashboard:
    get:
      operationId: MarketController_getDashboardActiveMarkets
      summary: Get dashboard markets by tag
      description: Returns active markets and groups filtered by tag ID for dashboard
        display
      parameters:
        - name: page
          required: true
          in: query
          description: Page number
          schema:
            example: 1
            type: number
        - name: limit
          required: true
          in: query
          description: Number of items per page
          schema:
            example: 10
            type: number
        - name: tagId
          required: false
          in: query
          description: Filter markets by tag ID
          schema:
            type: number
      responses:
        "200":
          description: Dashboard markets and groups with volume and liquidity data
        "500":
          description: Server error when retrieving dashboard data
      tags:
        - Markets
  /markets/bannered:
    get:
      operationId: MarketController_getBanneredMarkets
      summary: Get bannered markets and groups
      description: Returns markets that are marked to be displayed in banner sections
      parameters: []
      responses:
        "200":
          description: List of bannered markets with their details
        "500":
          description: Server error when retrieving bannered markets
      tags:
        - Markets
  /markets/conditions/{conditionId}:
    get:
      operationId: MarketController_getMarketByConditionId
      summary: Get market by condition ID
      description: Retrieves market details using its unique condition ID
      parameters:
        - name: conditionId
          required: true
          in: path
          description: The condition ID of the market
          schema:
            example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      responses:
        "200":
          description: Market details
        "500":
          description: Server error when retrieving market data
      tags:
        - Markets
  /markets/{addressOrSlug}:
    get:
      operationId: MarketController_find
      summary: Get market or group by address or slug
      description: Retrieves market or group data using either an Ethereum address or
        a slug identifier
      parameters:
        - name: addressOrSlug
          required: true
          in: path
          description: Market/group address (0x...) or slug identifier (my-market-name)
          schema:
            example: crypto-predictions-2025
      responses:
        "200":
          description: Market or group details with pricing and volume data
        "404":
          description: Market or group not found
        "500":
          description: Server error when retrieving market/group data
      tags:
        - Markets
  /markets/{address}/next:
    get:
      operationId: MarketController_findMarketNext
      summary: Get market by address without legacy format
      description: Returns raw market data object by Ethereum address without legacy
        transformations
      parameters:
        - name: address
          required: true
          in: path
          description: Ethereum address of the market
          schema:
            example: "0x1234567890abcdef1234567890abcdef12345678"
      responses:
        "200":
          description: Raw market object
        "404":
          description: Market not found
        "500":
          description: Server error when retrieving market data
      tags:
        - Markets
  /markets/{slug}/get-feed-events:
    get:
      operationId: MarketController_getFeedEvent
      summary: Get feed events for a market
      description: Retrieves the latest feed events related to a specific market with
        pagination support
      parameters:
        - name: page
          required: false
          in: query
          description: Page number for pagination
          schema:
            example: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Number of events per page
          schema:
            example: 10
            type: number
        - name: slug
          required: false
          in: path
          description: Slug of the market
          schema:
            example: my-market-slug-123
      responses:
        "200":
          description: List of feed events for the market
        "500":
          description: Server error when retrieving feed events
      tags:
        - Markets
      security:
        - bearer: []
  /markets/{slug}/historical-price:
    get:
      operationId: MarketOrderbookController_getHistoricalPrice
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - Markets
  /markets/{slug}/orderbook:
    get:
      operationId: MarketOrderbookController_getOrderbook
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - Markets
  /markets/{slug}/locked-balance:
    get:
      operationId: MarketOrderbookController_getLockedBalance
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - Markets
  /markets/{slug}/user-orders:
    get:
      operationId: MarketOrderbookController_getUserOrders
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - Markets
  /markets/{slug}/events:
    get:
      operationId: MarketOrderbookController_getMarketEvents
      parameters:
        - name: page
          required: true
          in: query
          description: Page number
          schema:
            example: 1
            type: number
        - name: limit
          required: true
          in: query
          description: Number of items per page
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: ""
      tags:
        - Markets
  /markets/search:
    get:
      operationId: MarketSearchController_search
      summary: Search for markets based on semantic similarity
      parameters:
        - name: query
          required: true
          in: query
          description: Search query text
          schema:
            example: Sports betting markets with high odds
            type: string
        - name: limit
          required: false
          in: query
          description: Maximum number of results to return
          schema:
            default: 10
            example: 10
            type: number
        - name: page
          required: false
          in: query
          description: Number of page
          schema:
            default: 1
            example: 0
            type: number
        - name: similarityThreshold
          required: false
          in: query
          description: Minimum similarity score (0-1)
          schema:
            default: 0.5
            example: 0.5
            type: number
      responses:
        "200":
          description: Returns markets matching the search query
        "400":
          description: Invalid request parameters
        "500":
          description: Internal server error
  /widgets/total-volume:
    get:
      operationId: WidgetController_getTotalVolume
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - Widgets
  /comments:
    post:
      operationId: CommentController_createComment
      summary: Create a new comment
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCommentDto"
      responses:
        "201":
          description: Comment created successfully.
        "500":
          description: Failed to create comment.
      tags:
        - Comments
      security:
        - bearer: []
  /comments/markets/{slug}:
    get:
      operationId: CommentController_getCommentsForMarket
      summary: Get comments for a entity
      parameters:
        - name: slug
          required: true
          in: path
          description: Market entity
          schema:
            example: my-market-slug-123
            type: string
        - name: page
          required: true
          in: query
          description: Page number for pagination
          schema:
            example: 1
            type: number
        - name: limit
          required: true
          in: query
          description: Number of results per page
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: Comments retrieved successfully.
        "400":
          description: Invalid page or limit.
        "500":
          description: Failed to retrieve comments.
      tags:
        - Comments
  /comments/groups/{slug}:
    get:
      operationId: CommentController_getCommentsForMarket
      summary: Get comments for a entity
      parameters:
        - name: slug
          required: true
          in: path
          description: Market entity
          schema:
            example: my-market-slug-123
            type: string
        - name: page
          required: true
          in: query
          description: Page number for pagination
          schema:
            example: 1
            type: number
        - name: limit
          required: true
          in: query
          description: Number of results per page
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: Comments retrieved successfully.
        "400":
          description: Invalid page or limit.
        "500":
          description: Failed to retrieve comments.
      tags:
        - Comments
  /comments/{id}/like:
    post:
      operationId: CommentController_likeComment
      summary: Like a comment
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the comment to like
          schema:
            example: 1
            type: number
      responses:
        "201":
          description: Comment liked successfully.
        "500":
          description: Failed to like comment.
      tags:
        - Comments
      security:
        - bearer: []
  /comments/{id}/unlike:
    post:
      operationId: CommentController_unlikeComment
      summary: Unlike a comment
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the comment to unlike
          schema:
            example: 1
            type: number
      responses:
        "201":
          description: Comment unliked successfully.
        "500":
          description: Failed to unlike comment.
      tags:
        - Comments
      security:
        - bearer: []
  /comments/{id}/likes:
    get:
      operationId: CommentController_getCommentLikes
      summary: Get likes for a comment
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the comment to retrieve likes for
          schema:
            example: 1
            type: number
      responses:
        "200":
          description: Likes retrieved successfully.
        "500":
          description: Failed to retrieve likes.
      tags:
        - Comments
  /orders:
    post:
      operationId: OrderController_createOrder
      summary: Create a new order
      description: Creates a buy/sell order for prediction market positions with
        signature validation
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderDto"
      responses:
        "201":
          description: Order successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponseDto"
        "400":
          description: Invalid order data, insufficient balance/allowance, or market
            deadline passed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        "401":
          description: User not authenticated
        "500":
          description: Server error during order creation
      tags:
        - Orders
      security:
        - limitless_session: []
  /orders/{orderId}:
    delete:
      operationId: OrderController_cancelOrder
      summary: Cancel a specific order
      parameters:
        - name: orderId
          required: true
          in: path
          description: Unique identifier of the order to be cancelled
          schema:
            example: 6f52b6d2-6c9e-4a5c-8a4f-28ab4b7ff203
            type: string
      responses:
        "200":
          description: Order successfully cancelled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelOrderResponseDto"
        "400":
          description: Order cannot be cancelled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        "401":
          description: User not authenticated or not the order owner
        "500":
          description: Server error during cancellation
      tags:
        - Orders
      security:
        - bearer: []
  /orders/cancel-batch:
    post:
      operationId: OrderController_cancelOrderBatch
      summary: Cancel multiple orders in batch
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteOrderBatchDto"
      responses:
        "200":
          description: Orders successfully cancelled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelOrderBatchResponseDto"
        "400":
          description: Orders from different markets or invalid order data
        "401":
          description: User not authenticated or not the owner of all orders
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        "500":
          description: Server error during batch cancellation
      tags:
        - Orders
      security:
        - bearer: []
  /orders/all/{slug}:
    delete:
      operationId: OrderController_cancelAllOrders
      summary: Cancel all of a user's orders in a specific market
      parameters: []
      responses:
        "200":
          description: All orders successfully cancelled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelAllOrdersResponseDto"
        "400":
          description: Invalid market slug
        "401":
          description: User not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        "500":
          description: Server error during cancellation
      tags:
        - Orders
      security:
        - bearer: []
  /portfolio/trades:
    get:
      operationId: PortfolioController_getTrades
      summary: Get all trades for the authenticated user
      parameters: []
      responses:
        "200":
          description: List of trades
        "401":
          description: Unauthorized
      tags:
        - Portfolio
      security:
        - bearer: []
        - limitless_session: []
  /portfolio/redeems:
    get:
      operationId: PortfolioController_getRedeems
      summary: Get all redeems for the authenticated user
      parameters: []
      responses:
        "200":
          description: List of redeems
        "401":
          description: Unauthorized
      tags:
        - Portfolio
      security:
        - bearer: []
        - limitless_session: []
  /portfolio/positions:
    get:
      operationId: PortfolioController_getPositions
      summary: Get all positions for the authenticated user
      parameters: []
      responses:
        "200":
          description: List of positions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortfolioPositionsDto"
        "401":
          description: Unauthorized
      tags:
        - Portfolio
      security:
        - bearer: []
        - limitless_session: []
  /portfolio/history:
    get:
      operationId: PortfolioController_getHistory
      summary: Get paginated history of user actions.
      description: Includes AMM, CLOB trades, splits/merges, NegRisk conversions
      parameters:
        - name: page
          required: true
          in: query
          description: Page number
          schema:
            example: 1
            type: number
        - name: limit
          required: true
          in: query
          description: Number of items per page
          schema:
            example: 10
            type: number
        - name: from
          required: false
          in: query
          description: Start date for filtering (ISO 8601 format)
          schema:
            format: date-time
            example: 2024-01-01T00:00:00.000Z
            type: string
        - name: to
          required: false
          in: query
          description: End date for filtering (ISO 8601 format)
          schema:
            format: date-time
            example: 2024-12-31T23:59:59.999Z
            type: string
      responses:
        "200":
          description: Paginated history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HistoryResponseDto"
        "400":
          description: Invalid pagination parameters
        "401":
          description: Unauthorized
      tags:
        - Portfolio
      security:
        - bearer: []
        - limitless_session: []
  /portfolio/{account}/traded-volume:
    get:
      operationId: PublicPortfolioController_tradedVolume
      summary: Get total traded volume by user
      parameters:
        - name: account
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Total traded volume
      tags:
        - Public Portfolio
  /portfolio/{account}/positions:
    get:
      operationId: PublicPortfolioController_getPositions
      summary: Get all positions for user
      parameters:
        - name: account
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: List of positions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortfolioPositionsDto"
      tags:
        - Public Portfolio
  /chart/{market}/{account}:
    get:
      operationId: ChartController_getChartData
      parameters:
        - name: market
          required: true
          in: path
          schema:
            type: string
        - name: account
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
info:
  title: Limitless Exchange API
  description: ""
  version: "0.2"
  contact: {}
tags:
  - name: limitless-exchange
    description: ""
  - name: conditional-tokens-framework
    description: ""
servers: []
components:
  securitySchemes:
    cookie:
      type: apiKey
      in: header
      name: limitless_session
  schemas:
    CreateUserDto:
      type: object
      properties:
        client:
          type: string
          description: Client type for authentication
          enum:
            - eoa
            - etherspot
          example: eoa
        smartWallet:
          type: string
          description: Smart wallet address (required for Etherspot client)
          example: "0x1234567890123456789012345678901234567890"
        r:
          type: string
          description: Referral code associated with the user who referred (invited) this
            user
      required:
        - client
    CreateCommentDto:
      type: object
      properties: {}
    Order:
      type: object
      properties:
        salt:
          type: number
          description: Unique random value for signature uniqueness
          example: 1234567890
        maker:
          type: string
          description: Ethereum address of the maker (order creator)
          example: "0x742d35Cc6634C0532925a3b844Bc454e4438f44e"
        signer:
          type: string
          description: Address that signed the order
          example: "0x742d35Cc6634C0532925a3b844Bc454e4438f44e"
        taker:
          type: string
          description: Specific taker address (optional for open orders)
          example: "0x0000000000000000000000000000000000000000"
        tokenId:
          type: string
          description: Token ID being traded (yes or no position ID)
          example: "196332044857908579498285167379934237586289302353716299439995448593246\
            45414627"
        makerAmount:
          type: number
          description: Amount the maker is offering
          example: 1000000000000000000
        takerAmount:
          type: number
          description: Amount the maker wants in return
          example: 2000000000000000000
        expiration:
          type: string
          description: Order expiration timestamp
          example: 2025-04-30T23:59:59Z
        nonce:
          type: number
          description: Order nonce for cancellation tracking
          example: 42
        price:
          type: number
          description: Order price (required for GTC orders)
          example: 0.75
        feeRateBps:
          type: number
          description: Fee rate in basis points (1% = 100)
          example: 0
        side:
          type: number
          description: "Order side: 0 = BUY, 1 = SELL"
          enum:
            - 0
            - 1
          example: 0
        signature:
          type: string
          description: EIP-712 signature of order details
          example: 0x123abc456def789ghi0123abc456def789ghi0123abc456def789ghi0123456789012345678901
        signatureType:
          type: number
          description: Signature type (0-3)
          enum:
            - 0
            - 1
            - 2
            - 3
          example: 2
      required:
        - salt
        - maker
        - signer
        - tokenId
        - makerAmount
        - takerAmount
        - feeRateBps
        - side
        - signature
        - signatureType
    CreateOrderDto:
      type: object
      properties:
        order:
          description: Order details including signature and amounts
          allOf:
            - $ref: "#/components/schemas/Order"
        ownerId:
          type: number
          description: Profile ID of the order owner
          example: 12345
        orderType:
          type: string
          description: Order type (GTC=Good Till Cancelled, IOC=Immediate Or Cancel)
          enum:
            - FOK
            - GTC
            - GTD
          example: GTC
        marketSlug:
          type: string
          description: Market identifier slug
          example: biden-vs-trump-2024
      required:
        - order
        - ownerId
        - orderType
        - marketSlug
    MakerMatch:
      type: object
      properties: {}
    OrderResponseDto:
      type: object
      properties:
        order:
          description: Order details
          allOf:
            - $ref: "#/components/schemas/Order"
        makerMatches:
          description: Maker matches if order was matched immediately
          type: array
          items:
            $ref: "#/components/schemas/MakerMatch"
      required:
        - order
    ErrorResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: Invalid order data
      required:
        - message
    CancelOrderResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Confirmation message for the cancelled order
          example: Order canceled successfully
      required:
        - message
    DeleteOrderBatchDto:
      type: object
      properties:
        orderIds:
          description: Array of order IDs to be cancelled in a single batch operation
          example:
            - 6f52b6d2-6c9e-4a5c-8a4f-28ab4b7ff203
            - 9e31c452-8a2b-42d1-b327-65f18d07dc96
          items:
            type: array
          type: array
      required:
        - orderIds
    CancelOrderBatchResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Confirmation message for the cancelled orders
          example: Orders canceled successfully
      required:
        - message
    CancelAllOrdersResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Confirmation message for cancelling all orders
          example: Orders canceled successfully
      required:
        - message
    PortfolioRewardsChartEntryDto:
      type: object
      properties:
        timestamp:
          type: number
          description: Timestamp of the rewards entry
          example: 1672531200000
        userRewards:
          type: string
          description: User rewards for this timestamp in token decimals
          example: "25000000"
        totalRewards:
          type: string
          description: Total rewards for this timestamp in token decimals
          example: "60000000"
      required:
        - timestamp
        - userRewards
        - totalRewards
    EpochRewardDataDto:
      type: object
      properties:
        epochId:
          type: number
          description: Unique identifier of the epoch
          example: 1
        timestamp:
          format: date-time
          type: string
          description: Timestamp when the epoch occurred
          example: 2024-01-01T00:00:00.000Z
        totalRewards:
          type: string
          description: Total rewards distributed in this epoch in token decimals
          example: "1500000"
        userRewards:
          type: string
          description: User rewards earned in this epoch in token decimals
          example: "150000"
        earnedPercent:
          type: number
          description: Part of total rewards earned by the user - [0; 1]
          example: 0.1
      required:
        - epochId
        - timestamp
        - totalRewards
        - userRewards
        - earnedPercent
    PortfolioRewardsDto:
      type: object
      properties:
        todaysRewards:
          type: string
          description: Rewards earned today in token decimals
          example: "50250000"
        totalUnpaidRewards:
          type: string
          description: Total unpaid rewards in token decimals
          example: "200750000"
        totalUserRewardsLastEpoch:
          type: string
          description: Total user rewards from the last epoch in token decimals
          example: "150500000"
        rewardsChartData:
          description: Chart data showing rewards over time
          type: array
          items:
            $ref: "#/components/schemas/PortfolioRewardsChartEntryDto"
        rewardsByEpoch:
          description: Rewards data by epoch
          type: array
          items:
            $ref: "#/components/schemas/EpochRewardDataDto"
      required:
        - todaysRewards
        - totalUnpaidRewards
        - totalUserRewardsLastEpoch
        - rewardsByEpoch
    AmmPositionDto:
      type: object
      properties:
        collateralAmount:
          type: string
          description: Amount of collateral invested in token decimals
          example: "100500000"
        latestTrade:
          type: object
          description: Latest trade associated with this position
        market:
          type: object
          description: Market information for this position
        outcomeIndex:
          type: number
          description: Index of the outcome token
          example: 0
        outcomeTokenAmount:
          type: string
          description: Amount of outcome tokens held in token decimals
          example: "50250000"
      required:
        - market
        - outcomeIndex
    Market:
      type: object
      properties:
        address:
          type: string
          description: The address of the FixedProductMarketMaker contract.
          minLength: 42
          maxLength: 42
          nullable: true
          uniqueItems: true
        title:
          type: string
          description: Represents the question of the market, the title metadata of the
            market.
          maxLength: 70
          nullable: false
          uniqueItems: true
        proxyTitle:
          type: string
          maxLength: 70
          default: null
          nullable: true
          uniqueItems: true
        description:
          type: string
          description: The description of the market.
          uniqueItems: false
          nullable: false
        question_id:
          type: object
          description: The bytes32 parsed title of the market.
          minLength: 66
          maxLength: 66
          uniqueItems: true
          nullable: true
        condition_id:
          type: object
          description: The bytes32 conditionId of the market, representing the conditions
            defined on condition preparation.
          minLength: 66
          maxLength: 66
          nullable: true
          uniqueItems: true
        outcome_slot_count:
          type: number
          description: The number of outcomes in the market.
          minimum: 2
          maximum: 2
          nullable: false
          default: 2
        winning_index:
          type: number
          description: The outcome index that was reported by the oracle.
          minimum: 1
          maximum: 2
          nullable: true
        payout_numerators:
          description: The oracle payout numerators that the oracle reported.
          nullable: true
          type: array
          items:
            type: string
        status:
          type: string
          description: Indicates the status of the market.
          nullable: false
        og_url:
          type: string
          description: The URL of the market OG image for SEO.
          nullable: true
        image_url:
          type: string
          description: The URL of the market logo image for SEO.
          nullable: true
        deadline:
          type: string
          description: The deadline of the market.
          nullable: false
        hidden:
          type: boolean
          default: false
        txHash:
          type: string
          default: null
        resolutionTxHash:
          type: string
          default: null
        priority_index:
          type: number
          default: null
      required:
        - address
        - title
        - proxyTitle
        - description
        - question_id
        - condition_id
        - outcome_slot_count
        - winning_index
        - payout_numerators
        - status
        - og_url
        - image_url
        - deadline
        - hidden
        - txHash
        - resolutionTxHash
        - priority_index
    PositionDataDto:
      type: object
      properties:
        cost:
          type: string
          description: Cost basis of the position in token decimals (e.g. 1 USDC = 1000000)
          example: "75000000"
        fillPrice:
          type: string
          description: Average fill price of the position
          example: "750000"
        realisedPnl:
          type: string
          description: Realized profit/loss in token decimals
          example: "0"
        unrealizedPnl:
          type: string
          description: Unrealized profit/loss in token decimals
          example: "25000000"
        marketValue:
          type: string
          description: Current market value of the position in token decimals
          example: "100000000"
      required:
        - cost
        - fillPrice
        - realisedPnl
        - unrealizedPnl
        - marketValue
    MarketPositionDataDto:
      type: object
      properties:
        yes:
          description: Position data for YES outcome
          allOf:
            - $ref: "#/components/schemas/PositionDataDto"
        no:
          description: Position data for NO outcome
          allOf:
            - $ref: "#/components/schemas/PositionDataDto"
      required:
        - yes
        - no
    ClobPositionDto:
      type: object
      properties:
        market:
          description: Market information
          allOf:
            - $ref: "#/components/schemas/Market"
        positions:
          description: Position data for the market
          allOf:
            - $ref: "#/components/schemas/MarketPositionDataDto"
        latestTrade:
          type: object
          description: Latest trade prices
        tokensBalance:
          type: object
          description: Token balances in token decimals
        orders:
          type: object
          description: Order information
        rewards:
          type: object
          description: Rewards information for this position
      required:
        - market
        - positions
        - tokensBalance
        - orders
    PortfolioPositionsDto:
      type: object
      properties:
        rewards:
          description: Rewards information for the portfolio
          allOf:
            - $ref: "#/components/schemas/PortfolioRewardsDto"
        amm:
          description: List of AMM positions
          type: array
          items:
            $ref: "#/components/schemas/AmmPositionDto"
        clob:
          description: List of CLOB positions
          type: array
          items:
            $ref: "#/components/schemas/ClobPositionDto"
      required:
        - rewards
        - amm
        - clob
    HistoryMarketGroupDto:
      type: object
      properties:
        id:
          type: number
          description: Unique identifier of the group
          example: 10000037
        slug:
          type: string
          description: Slug identifier of the group
          example: positionconverted-test-1744046422596
        title:
          type: string
          description: Title of the group
          example: PositionConverted test
        status:
          type: string
          description: Status of the group
          example: FUNDED
        deadline:
          type: string
          description: Deadline for the group
          example: 2025-04-11T22:34:56.000Z
        hidden:
          type: boolean
          description: Whether the group is hidden
          example: false
        txHash:
          type: string
          description: Transaction hash for the group
          example: null
        resolutionTxHash:
          type: string
          description: Resolution transaction hash
          example: null
        priorityIndex:
          type: number
          description: Priority index of the group
          example: 0
        metadata:
          type: object
          description: Group metadata
          example:
            isBannered: false
        negRiskMarketId:
          type: string
          description: Onchain NegRisk market ID as identified by the NegriskAdapter
            smart-contract
          example: "0xe103633b40e9b664f8acc89e8cf7b7916475961ae1708a249fa5d6c933168c00"
        createdAt:
          type: string
          description: Creation timestamp
          example: 2025-04-07T17:20:22.135Z
        updatedAt:
          type: string
          description: Last update timestamp
          example: 2025-04-07T17:22:08.464Z
      required:
        - id
        - slug
        - title
        - status
        - deadline
        - hidden
        - priorityIndex
        - metadata
        - negRiskMarketId
        - createdAt
        - updatedAt
    HistoryMarketDto:
      type: object
      properties:
        closed:
          type: boolean
          description: Whether the market is closed
          example: false
        collateral:
          type: object
          description: Collateral token information
          example:
            symbol: USDC
            id: 7
            decimals: 6
        group:
          description: Market group information
          allOf:
            - $ref: "#/components/schemas/HistoryMarketGroupDto"
        condition_id:
          type: string
          description: Condition ID of the market
          example: "0x08518bc4bb8a3dbb89aac4425ace0876b94a5dfa77dee47a20737a19cf67e325"
        funding:
          type: number
          description: Market funding amount
          example: 0
        id:
          type: number
          description: Market ID
          example: 980
        slug:
          type: string
          description: Market slug
          example: market-1-1744046422691
        title:
          type: string
          description: Market title
          example: Market 1
        deadline:
          type: string
          description: Market deadline
          example: 2025-04-11T22:34:56.000Z
      required:
        - closed
        - collateral
        - group
        - condition_id
        - funding
        - id
        - slug
        - title
        - deadline
    HistoryEntryDto:
      type: object
      properties:
        blockTimestamp:
          type: number
          description: Block timestamp of the operation
          example: 1744115608
        collateralAmount:
          type: string
          description: Collateral amount involved in the operation
          example: "0"
        market:
          description: Market information
          allOf:
            - $ref: "#/components/schemas/HistoryMarketDto"
        outcomeTokenAmount:
          type: string
          description: Amount of outcome tokens involved
          example: "100"
        outcomeTokenAmounts:
          description: Amounts of outcome tokens for each outcome
          example:
            - "100"
            - "0"
          type: array
          items:
            type: string
        outcomeIndex:
          type: number
          description: Index of the outcome
          example: 0
        outcomeTokenPrice:
          type: number
          description: Price of the outcome token
          example: 0.5
        strategy:
          type: string
          description: Type of operation
          example: Convert
          enum:
            - Buy
            - Sell
            - Limit Buy
            - Limit Sell
            - Market Buy
            - Market Sell
            - Split
            - Merge
            - Convert
        transactionHash:
          type: string
          description: Transaction hash of the operation
          example: "0x992f36465f938b21a6a5fe3c417c98c3268a616a05479d2dc53870c6cd1a0761"
      required:
        - blockTimestamp
        - collateralAmount
        - market
        - outcomeTokenAmount
        - outcomeTokenAmounts
        - outcomeIndex
        - outcomeTokenPrice
        - strategy
    HistoryResponseDto:
      type: object
      properties:
        data:
          description: List of history entries
          type: array
          items:
            $ref: "#/components/schemas/HistoryEntryDto"
        totalCount:
          type: number
          description: Total count of entries
          example: 8
      required:
        - data
        - totalCount
